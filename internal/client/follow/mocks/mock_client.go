// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/follow/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/client/follow/client.go -destination=internal/client/follow/mocks/mock_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// FetchFollowerIds mocks base method.
func (m *MockClient) FetchFollowerIds(userID uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFollowerIds", userID)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFollowerIds indicates an expected call of FetchFollowerIds.
func (mr *MockClientMockRecorder) FetchFollowerIds(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFollowerIds", reflect.TypeOf((*MockClient)(nil).FetchFollowerIds), userID)
}
